@charset "UTF-8";
/*
App reset by Ben Frain @benfrain / benfrain.com

Latest: https://github.com/benfrain/app-reset

An opinionated set of resets suitable for building web applications.

## Accessibility Notes
These resets target HTML elements that typically receive styling defaults by User Agents that I always need to 'undo'.

Be aware that some of these resets have a negative impact on the default usability and accessibility of a web page. Therefore, ensure you add an equivalent accessible style back that matches your project aesthetic.

## You'll want to run this through Autoprefixer You'll typically need to run this through (https://github.com/postcss/autoprefixer) for production. Only essential prefixes are added here (e.g. proprietary property value/pairs) and you'll need to set prefixing relative to your desired browser support matrix.

*/
/*Hat tip to @thierrykoblentz for this approach: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
html {
  box-sizing: border-box; }

/*Yes, the universal selector. No, it isn't slow: https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/*/
* {
  /*This prevents users being able to select text. Stops long presses in iOS bringing up copy/paste UI for example. Note below we specifically switch user-select on for inputs for the sake of Safari. Bug here: https://bugs.webkit.org/show_bug.cgi?id=82692*/
  user-select: none;
  /*This gets -webkit specific prefix as it is a non W3C property*/
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  /*Older Androids need this instead*/
  -webkit-tap-highlight-color: transparent;
  /* Most devs find border-box easier to reason about. However by inheriting we can mix box-sizing approaches.*/
  box-sizing: inherit; }

*:before,
*:after {
  box-sizing: inherit; }

/* Switching user-select on for inputs and contenteditable specifically for Safari (see bug link above)*/
input[type],
[contenteditable] {
  user-select: text; }

body,
h1,
h2,
h3,
h4,
h5,
h6,
p {
  /*We will be adding our own margin to these elements as needed.*/
  margin: 0;
  /*You'll want to set font-size as needed.*/
  font-size: 1rem;
  /*No bold for h tags unless you want it*/
  font-weight: 400; }

a {
  text-decoration: none;
  color: inherit; }

/*No bold for b tags by default*/
b {
  font-weight: 400; }

/*Prevent these elements having italics by default*/
em,
i {
  font-style: normal; }

/*Mozilla adds a dotted outline around a tags when they receive tab focus. This removes it. Be aware this is a backwards accessibilty step!*/
a:focus {
  outline: 0; }

input,
fieldset {
  appearance: none;
  border: 0;
  padding: 0;
  margin: 0;
  /*inputs and fieldset defaults to having a min-width equal to its content in Chrome and Firefox (https://code.google.com/p/chromium/issues/detail?id=560762), we may not want that*/
  min-width: 0;
  /*Reset the font size and family*/
  font-size: 1rem;
  font-family: inherit; }

/* For IE, we want to remove the default cross ('X') that appears in input fields when a user starts typing - Make sure you add your own! */
input::-ms-clear {
  display: none; }

/*This switches the default outline off when an input receives focus (really important for users tabbing through with a keyboard) so ensure you put something decent in for your input focus instead!!*/
input:focus {
  outline: 0; }

input[type="number"] {
  /*Mozilla shows the spinner UI on number inputs unless we use this:*/
  -moz-appearance: textfield; }

/*Removes the little spinner controls for number type inputs (WebKit browsers/forks only)*/
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  appearance: none; }

/*SVG defaults to inline display which I dislike*/
svg {
  display: inline-flex; }

img {
  /*Make images behave responsively. Here they will scale up to 100% of their natural size*/
  max-width: 100%;
  /*Make images display as a block (UA default is usually inline)*/
  display: block; }

@font-face {
  font-family: 'FuturaBoldRegular';
  src: url("futura-bold-webfont.eot");
  src: local("â˜º"), url("futura-bold-webfont.eot?#iefix") format("embedded-opentype"), url("futura-bold-webfont.woff") format("woff"), url("futura-bold-webfont.ttf") format("truetype"), url("futura-bold-webfont.svg#FuturaBoldRegular") format("svg");
  font-weight: normal;
  font-style: normal; }

html {
  font-size: 14px;
  overflow-x: hidden; }

body {
  background-color: #eaeadc;
  color: #050505; }

h1,
h2,
h3 {
  font-family: FuturaBoldRegular, helvetica neue, helvetica, arial, sans-serif; }

h1 {
  font-size: 4rem;
  max-width: 11em;
  margin: 0 auto 2rem; }

h2 {
  font-size: 3rem;
  margin-bottom: 2rem; }

h3 {
  font-size: 1.6rem; }

h4 {
  font-size: 1.2rem;
  font-style: italic; }

header {
  background-color: #198226;
  background-image: url(texture.png);
  color: #fafafa;
  padding: 2rem;
  position: relative; }
  header .inner {
    text-align: center;
    border: 8px double #fafafa;
    padding: 2rem;
    margin: auto;
    min-height: 50vh; }
  header img {
    display: block;
    margin: 0 auto 2rem; }
  header p {
    font-size: 1.8rem;
    max-width: 22em;
    margin: 0 auto; }
  header::after, header::before {
    z-index: -1;
    content: '';
    width: 100%;
    height: 1rem;
    display: block;
    position: absolute;
    bottom: .25rem;
    background-color: rgba(0, 0, 0, 0.4);
    box-shadow: 0 0 2rem rgba(0, 0, 0, 0.4); }
  header::after {
    right: 0;
    transform: rotate(0.5deg) translateX(2%); }
  header::before {
    left: 0;
    transform: rotate(-0.5deg) translateX(-2%); }

.btn {
  background-color: #198226;
  font-family: FuturaBoldRegular;
  font-size: 20px;
  display: inline-block;
  padding: .5em 1em;
  margin-bottom: .25em;
  color: #fafafa; }

section {
  max-width: 960px;
  width: 100%;
  margin: 0 auto;
  padding: 4rem; }
  section.intro p {
    margin: 0 0 1.3rem;
    line-height: 1.2;
    font-size: 1.4rem; }

article {
  margin-bottom: 20px;
  border-left: 1rem solid #198226;
  padding-left: 1rem;
  transition: transform .1s ease-in; }
  article:hover {
    transform: scale(1.05); }
